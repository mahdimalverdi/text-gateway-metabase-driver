apiVersion: v1
kind: Pod
metadata:
  name: http-echo-mock
  namespace: data-infra
  labels:
    app: http-echo-mock
spec:
  containers:
    - name: http-echo-mock
      image: python:3.11-alpine
      command:
        - python
        - -c
        - |
          import json
          from http.server import BaseHTTPRequestHandler, HTTPServer
          from urllib.parse import urlparse, parse_qs

          class Handler(BaseHTTPRequestHandler):
              def do_GET(self):
                  parsed = urlparse(self.path)
                  params = parse_qs(parsed.query)
                  query_text = params.get("q", [""])[0]
                  payload = {
                      "result": f"Echo: {query_text}",
                      "query_length": len(query_text),
                  }
                  body = json.dumps(payload).encode("utf-8")
                  self.send_response(200)
                  self.send_header("Content-Type", "application/json")
                  self.send_header("Content-Length", str(len(body)))
                  self.end_headers()
                  self.wfile.write(body)

              def log_message(self, format, *args):
                  return

          with HTTPServer(("0.0.0.0", 8080), Handler) as httpd:
              httpd.serve_forever()
      ports:
        - containerPort: 8080
          name: http
      readinessProbe:
        httpGet:
          path: /?q=ready
          port: http
        initialDelaySeconds: 2
        periodSeconds: 5
      livenessProbe:
        httpGet:
          path: /?q=alive
          port: http
        initialDelaySeconds: 5
        periodSeconds: 10
  restartPolicy: Always
